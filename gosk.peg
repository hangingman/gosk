package main

type Parser Peg {
 s Scan
}

root <- text EOT                / # 正しいテキスト
 text <.+> {p.s.Err(begin)} EOT / # エラー
 <.+> {p.s.Err(begin)} EOT        # エラー

# 複数行のテキスト
text <- line line*

line <- comments    EOL /
        blanks      EOL /
        label       EOL /
        nim_only    EOL /
        nim_params  EOL /
        nim_operand EOL /
        < [^\n]+ _ EOL > {
 p.s.line++;
 p.s.lineHead = begin + 1
 fmt.Printf("line %04d OTHERS \t%s", p.s.line, text)
}

# ニーモニックのみ
nim_only <- < _ ident _ comment > {
 p.s.line++;
 p.s.lineHead = begin + 1
 fmt.Printf("line %04d NIMONIC\t%s\n", p.s.line, text)
}

# ニーモニックとパラメーター
nim_params <- < _ ident _ src _ comment > {
 p.s.line++;
 p.s.lineHead = begin + 1
 fmt.Printf("line %04d NIMONIC\t%s\n", p.s.line, text)
}

# ニーモニックとオペランド
nim_operand <- < _ ident _ dst _ ',' _ src _ comment > {
 p.s.line++;
 p.s.lineHead = begin + 1
 fmt.Printf("line %04d NIM & OP\t%s\n", p.s.line, text)
}

# コメント
comments <- < _ ';' [^\n]* _ > {
 p.s.line++;
 p.s.lineHead = begin + 1
 fmt.Printf("line %04d COMMENT\t%s\n", p.s.line, text)
}

# 空行
blanks <- < _ > {
 p.s.line++;
 p.s.lineHead = begin + 1
 fmt.Printf("line %04d BLANK  \t%s\n", p.s.line, text)
}

# ラベル
label <- < ident ':' _ > {
 p.s.line++;
 p.s.lineHead = begin + 1
 fmt.Printf("line %04d LABEL  \t%s\n", p.s.line, text)
}

dst        <- ( ident / immediate / memory / quoted )  # 送り先
src        <- ( ident / immediate / memory / quoted )  # 送り元

memory     <- "[" ( ident / hex ) "]"                  # メモリ '[SI]' や '[0x0ff0]'
immediate  <- hex / number / expression                # 即値 '0x55' や '66' など + 数式
quoted     <- '"' [^"]+ '"'                            # テキスト "HARIBOTE" など
comment    <- (';' [^\n]*)?                            # トークンの内部のコメント

expression <- sign term (term_op term)*                # 数式
sign       <- [-+]? _                                  # 符号
term_op    <- [-+] _                                   # 項の演算子
term       <- factor (factor_op factor)*               # 項
factor_op  <- [*/] _                                   # 因数の演算子
factor     <- ident / number / '(' _ expression ')' _  # 因数
ident      <- [a-zA-Z] [a-zA-Z0-9]* _                  # 変数
hex        <- "0x" [0-9a-zA-Z]+ _                      # 16進値
number     <- [0-9]+ _                                 # 数値
__         <- ![a-zA-Z0-9_] _                          # キーワードの間の空白文字
_          <- [ \t]*                                   # 0回以上の空白文字の繰り返し
EOL        <- '\r\n' / '\n'                            # 改行コード
EOT        <- !.                                       # テキストの終わり
